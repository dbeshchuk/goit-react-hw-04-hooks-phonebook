{"version":3,"sources":["components/ContactForm/ContactForm.js","components/ContactItem/ContactItem.js","components/ContactsList/ContactsList.js","components/Filter/Filter.js","App.js","reportWebVitals.js","index.js"],"names":["ContactForm","submit","useState","name","setName","number","setNumber","onSubmit","e","preventDefault","placeholder","type","value","onChange","target","pattern","title","required","className","ContactItem","id","onDeleteClick","onClick","ContactsList","list","map","Filter","filter","change","App","localStorage","getItem","JSON","parse","contacts","setContacts","setFilter","useEffect","setItem","stringify","newContact","shortid","generate","some","item","alert","toLowerCase","includes","targetId","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ad29eb45.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst ContactForm = ({ submit }) => {\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n\n  function formSubmit(e) {\n    e.preventDefault();\n\n    submit({ name, number });\n\n    setName(\"\");\n    setNumber(\"\");\n  }\n\n  return (\n    <form onSubmit={formSubmit}>\n      <input\n        placeholder=\"Name\"\n        type=\"text\"\n        name=\"name\"\n        value={name}\n        onChange={(e) => setName(e.target.value)}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        required\n      />\n\n      <input\n        className=\"number-input\"\n        placeholder=\"Number\"\n        type=\"tel\"\n        name=\"number\"\n        value={number}\n        onChange={(e) => setNumber(e.target.value)}\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n        required\n      />\n\n      <button type=\"submit\">Add to contacts</button>\n    </form>\n  );\n};\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func,\n};\n\nexport default ContactForm;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst ContactItem = ({ id, name, number, onDeleteClick }) => (\n  <li>\n    {name}: {number}\n    <button onClick={onDeleteClick} id={id}>\n      Delete\n    </button>\n  </li>\n);\n\nContactItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  deleteItem: PropTypes.func,\n};\n\nexport default ContactItem;\n","import React from \"react\";\nimport ContactItem from \"../ContactItem/ContactItem\";\nimport PropTypes from \"prop-types\";\n\nconst ContactsList = ({ list, onDeleteClick }) => (\n  <ul>\n    {list.map(({ id, name, number }) => (\n      <ContactItem\n        key={id}\n        id={id}\n        name={name}\n        number={number}\n        onDeleteClick={onDeleteClick}\n      />\n    ))}\n  </ul>\n);\n\nContactsList.propTypes = {\n  list: PropTypes.array.isRequired,\n  onDeleteClick: PropTypes.func,\n};\n\nexport default ContactsList;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Filter = ({ filter, change }) => (\n  <label>\n    Find contacts by name:\n    <input\n      type=\"text\"\n      name=\"filter\"\n      value={filter}\n      onChange={change}\n      className=\"filter-input\"\n    />\n  </label>\n);\n\nFilter.propTypes = {\n  filter: PropTypes.string,\n  change: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import React, { useEffect, useState } from \"react\";\nimport shortid from \"shortid\";\nimport ContactForm from \"./components/ContactForm/ContactForm\";\nimport ContactsList from \"./components/ContactsList/ContactsList\";\nimport Filter from \"./components/Filter/Filter\";\nimport \"./App.css\";\n\nfunction App() {\n  const [contacts, setContacts] = useState(() => {\n    if (localStorage.getItem(\"contacts\")) {\n      return [...JSON.parse(localStorage.getItem(\"contacts\"))];\n    }\n\n    return [\n      { id: \"id-1\", name: \"Rosie Simpson\", number: \"459-12-56\" },\n      { id: \"id-2\", name: \"Hermione Kline\", number: \"443-89-12\" },\n      { id: \"id-3\", name: \"Eden Clements\", number: \"645-17-79\" },\n      { id: \"id-4\", name: \"Annie Copeland\", number: \"227-91-26\" },\n    ];\n  });\n\n  const [filter, setFilter] = useState(\"\");\n\n  useEffect(() => {\n    localStorage.setItem(\"contacts\", JSON.stringify(contacts));\n  }, [contacts]);\n\n  const handleSubmit = ({ name, number }) => {\n    const newContact = [{ id: shortid.generate(), name: name, number: number }];\n\n    contacts.some((item) => item.name === name)\n      ? alert(`${name} is already in contacts`)\n      : setContacts([...contacts, ...newContact]);\n  };\n\n  const filteredContacts = () => {\n    if (filter) {\n      return contacts.filter((item) =>\n        item.name.toLowerCase().includes(filter.toLowerCase())\n      );\n    }\n\n    return contacts;\n  };\n\n  const onDeleteClick = (targetId) => {\n    setContacts(contacts.filter((item) => item.id !== targetId));\n  };\n\n  return (\n    <div className=\"container\">\n      <h1>Phonebook</h1>\n      <ContactForm submit={handleSubmit} />\n\n      <h2>Contacts</h2>\n      <Filter\n        value={filter}\n        change={(e) => {\n          setFilter(e.target.value);\n        }}\n      />\n\n      <ContactsList\n        list={filteredContacts()}\n        onDeleteClick={(e) => {\n          onDeleteClick(e.target.id);\n        }}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}